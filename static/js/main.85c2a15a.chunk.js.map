{"version":3,"sources":["components/Header.js","components/Button.js","components/PlayerName.js","components/ScoreHolder.js","components/Players.js","utils/playingGrid.js","utils/decodeValueToXO.js","components/PlayingGridCell.js","components/PlayingGrid.js","components/GameBox.js","utils/updateStates.js","utils/resultCalculator.js","utils/resetGame.js","components/Home.js","App.js","index.js"],"names":["Header","className","Button","text","whenClicked","onClick","PlayerName","playerName","ScoreHolder","score","Players","gameStatus","winner","scores","whenPlayingGridCellisClicked","e","stateModifiers","stateValues","gridValues","moves","setGameStatus","changeGridValues","setMoves","checkIfGameEnded","checkIfGameIsPlayableButNoTurnPlayedYet","indexIn1DArray","gridValuesIndex","siblings","findIndex","cell","target","getIndexOfGridCellIn1DArray","Array","from","parentElement","children","getAllGridCellSiblingsFromEventTarget","rowIndex","Math","floor","columnIndex","calculateColumnIndexIn2DArray","checkIfCellIsAlreadyMarked","checkIfGridCellIsClickedPrecisely","newGridValues","gridVal","calculateNewGridValues","decodeCellText","value","PlayingGridCell","PlayingGrid","map","row","cellValue","GameBox","useState","setWinner","setScores","setGridValues","useEffect","result","newScores","updateStates","i","rowSum","columnSum","j","leftToRightDiagonal","rightToLeftDiagonal","checkIfGameFinished","checkIfGameAlreadyReset","whenResetButtonClicked","Home","App","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85c2a15a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./Header.css\";\n\nconst Header = () => {\n    return (\n        <div className=\"Header\">\n            Tic Tac Toe\n        </div>\n    )\n};\n\nexport default Header;","import React from \"react\";\n\nimport \"./Button.css\";\n\nconst Button = ({text,whenClicked}) => {\n    return (\n        <button className=\"button\" onClick={whenClicked}>{text}</button>\n    )\n};\n\nexport default Button;","import React from \"react\";\n\nimport \"./PlayerName.css\";\n\nconst PlayerName = ({playerName}) => {\n    return (\n        <div className=\"PlayerName\">\n            {playerName}\n        </div>\n    )\n};\n\nexport default PlayerName;","import React from \"react\";\n\nimport \"./ScoreHolder.css\";\n\nconst ScoreHolder = ({score}) => {\n    return (\n        <div className=\"ScoreHolder\">\n            {score}\n        </div>\n    )\n};\n\nexport default ScoreHolder;","import React from \"react\";\n\nimport PlayerName from \"./PlayerName\";\nimport ScoreHolder from \"./ScoreHolder\";\n\nimport \"./Players.css\";\n\nconst Players = ({gameStatus,winner,scores}) => {\n\n    const calculateGameStatusString = () => {\n        return gameStatus === 0 ? \"Lets Play!!\" : gameStatus === 1 ? \"Continue\" : (winner === 0 ? \"Draw\" : `Winner = ${winner===-1?\"Mohan\":\"Ben\"}`)\n    }\n\n    return (\n        <div className=\"PlayersGrid\">\n            <PlayerName playerName=\"Ben\" />\n            <div className=\"GameStatus\">\n                {calculateGameStatusString()}\n            </div>\n            <PlayerName playerName=\"Mohan\" />\n            <ScoreHolder score={scores[0]} />\n            <ScoreHolder score={scores[1]} />\n        </div>\n    )\n}\n\nexport default Players;","function checkIfGameIsPlayableButNoTurnPlayedYet (gameStatus) {\n    if(gameStatus === 0)\n        return true;\n    return false;\n}\n\nfunction checkIfGameEnded (gameStatus) {\n    if(gameStatus === -1)\n        return true;\n    return false;\n}\n\nfunction checkIfCellIsAlreadyMarked(gridValues,rowIndex,columnIndex) {\n    if(gridValues[rowIndex][columnIndex]!==0)\n        return true;\n    return false;\n}\n\nfunction checkIfGridCellIsClickedPrecisely(e) {\n    if(e.target.className === \"PlayingGridCell\")\n        return true;\n    return false;\n}\n\nfunction getAllGridCellSiblingsFromEventTarget(e) {\n    return Array.from(e.target.parentElement.children);\n}\n\nfunction getIndexOfGridCellIn1DArray(e,siblings) {\n    return siblings.findIndex(cell => {\n        if(cell === e.target)\n            return true;\n        return false;\n    });\n}\n\nfunction calculateRowIndexIn2DArray(indexIn1DArray) {\n    return Math.floor(indexIn1DArray/3);\n}\n\nfunction calculateColumnIndexIn2DArray(indexIn1DArray) {\n    return indexIn1DArray%3;\n}\n\nfunction calculateNewGridValues(gridValues,rowIndex,columnIndex,moves) {\n    const gridVal = moves%2 === 0 ? 1 : -1 ;\n    const newGridValues = [...gridValues];\n    newGridValues[rowIndex][columnIndex] = gridVal;\n    return newGridValues;\n}\n\n\nexport default function whenPlayingGridCellisClicked(e,stateModifiers,stateValues) {\n    let {\n        gameStatus,\n        gridValues,\n        moves\n    } = stateValues;\n\n    const {\n        setGameStatus,\n        changeGridValues,\n        setMoves\n    } = stateModifiers;\n\n    if(checkIfGameEnded(gameStatus))\n    {\n        return;\n    }\n\n    if(checkIfGameIsPlayableButNoTurnPlayedYet(gameStatus))\n    {\n        setGameStatus(1);\n    }\n\n    const siblings = [...getAllGridCellSiblingsFromEventTarget(e)];\n    \n    const gridValuesIndex = getIndexOfGridCellIn1DArray(e,siblings);\n    \n    const rowIndex = calculateRowIndexIn2DArray(gridValuesIndex);\n    const columnIndex = calculateColumnIndexIn2DArray(gridValuesIndex);\n\n    if(checkIfCellIsAlreadyMarked(gridValues,rowIndex,columnIndex))\n    {\n        return;\n    }\n    \n    if(checkIfGridCellIsClickedPrecisely(e))\n    {\n        const newGridValues = calculateNewGridValues(gridValues,rowIndex,columnIndex,moves);\n\n        setMoves(moves+1);\n\n        changeGridValues(newGridValues);\n    }\n}","export const decodeCellText = (value) => {\n    if(value === 0)\n    {\n        return '-';\n    }\n    else if(value === 1)\n        return 'X';\n    else if(value === -1)\n        return 'O';\n}","import React from \"react\";\n\nimport {decodeCellText} from \"../utils/decodeValueToXO\";\n\nimport \"./PlayingGridCell.css\";\n\nconst PlayingGridCell = ({value}) => {\n    return (\n        <div className=\"PlayingGridCell\">\n            {decodeCellText(value)}          \n        </div>\n    )\n}\n\nexport default PlayingGridCell;","import React from \"react\";\n\nimport whenPlayingGridCellisClicked from \"../utils/playingGrid\";\n\nimport PlayingGridCell from \"./PlayingGridCell\";\n\nimport \"./PlayingGrid.css\";\n\nconst PlayingGrid = ({gridValues,gameStatus,moves,changeGridValues,setGameStatus,setMoves}) => {\n\n    const stateModifiers = {\n        changeGridValues : changeGridValues,\n        setGameStatus : setGameStatus,\n        setMoves : setMoves\n    }\n\n    const stateValues = {\n        gridValues : gridValues,\n        gameStatus : gameStatus,\n        moves:moves\n    }\n\n\n    const generateGridCells = () =>{\n        return gridValues.map((row,rowIndex) => {\n            return row.map((cellValue,columnIndex) => {\n               return  <PlayingGridCell key={`${rowIndex}_${columnIndex}`} value={cellValue} />\n            })\n        });\n    }\n\n\n    return (\n        <div className=\"PlayingGrid\" onClick={(e) => whenPlayingGridCellisClicked(e,stateModifiers,stateValues)}>\n           {generateGridCells()}\n        </div>\n    )\n}\n\nexport default PlayingGrid;","import React, { useEffect, useState } from \"react\";\n\nimport checkIfGameFinished from \"../utils/resultCalculator\";\nimport updateStates from \"../utils/updateStates\";\nimport whenResetButtonClicked from \"../utils/resetGame.js\";\n\nimport Button from \"./Button\";\nimport Players from \"./Players\";\nimport PlayingGrid from \"./PlayingGrid\";\n\nimport \"./GameBox.css\";\n\nconst GameBox = () => {\n\n    const [gameStatus,setGameStatus] = useState(0);\n    const [winner,setWinner] = useState(0);\n    const [scores,setScores] = useState([0,0]);\n    const [gridValues,setGridValues] = useState([[0,0,0],[0,0,0],[0,0,0]]);\n    const [moves,setMoves] = useState(0);\n    \n    \n    useEffect(() => {\n        const result = checkIfGameFinished(gridValues);\n        updateStates(result,scores,moves,setWinner,setScores,setGameStatus,setMoves);\n    },[gridValues]);\n\n\n    return (\n        <div className=\"GameBox\">\n            <Players gameStatus={gameStatus} winner={winner} scores={scores} />\n            <PlayingGrid\n                gridValues={gridValues} \n                changeGridValues={setGridValues} \n                gameStatus={gameStatus}\n                setGameStatus={setGameStatus}\n                moves={moves}\n                setMoves={setMoves}\n            />\n            <div className=\"ButtonHolder\">\n                <Button text=\"Reset\" whenClicked={() => whenResetButtonClicked(setGameStatus,setWinner,setGridValues,setMoves,gameStatus)} />\n            </div>\n        </div>\n    )\n};\n\nexport default GameBox;","export default function updateStates(result,scores,moves,setWinner,setScores,setGameStatus,setMoves){\n    if(result === 1)\n    {\n        setWinner(1);\n        const newScores = [...scores];\n        newScores[0]++;\n        setScores(newScores);\n        setGameStatus(-1);\n        setMoves(0);\n    }\n    else if(result === -1)\n    {\n        setWinner(-1);\n        const newScores = [...scores];\n        newScores[1]++;\n        setScores(newScores);\n        setGameStatus(-1);\n        setMoves(0);\n    }\n    else\n    {\n        if(moves===9)\n        {\n            setWinner(0);\n            setGameStatus(-1);\n            setMoves(0);\n        }\n    }\n}","export default function checkIfGameFinished(gridValues) {\n    \n    for(let i=0;i<3;i++)\n    {\n        let rowSum=0;let columnSum=0;\n        for(let j=0;j<3;j++)\n        {\n            rowSum += gridValues[i][j];\n            columnSum += gridValues[j][i];\n        }\n        if(rowSum === 3) // Player with X wins\n        {\n            return 1;\n        }\n        else if(rowSum === -3) // Player with O wins\n        {\n            return -1;\n        }\n        else if(columnSum === 3)\n        {\n            return 1;\n        }\n        else if(columnSum === -3)\n        {\n            return -1;\n        }\n    }\n\n    let leftToRightDiagonal = gridValues[0][0]+gridValues[1][1]+gridValues[2][2];\n\n    if(leftToRightDiagonal === 3)\n    {\n        return 1;\n    }\n    else if(leftToRightDiagonal === -3)\n    {\n        return -1;\n    }\n\n    let rightToLeftDiagonal = gridValues[0][2]+gridValues[1][1]+gridValues[2][0];\n\n    if(rightToLeftDiagonal === 3)\n    {\n        return 1;\n    }\n    else if(rightToLeftDiagonal === -3)\n    {\n        return -1;\n    }\n\n    // If nothing matches\n    return 0;\n}","function checkIfGameAlreadyReset(gameStatus) {\n    if(gameStatus === 0)\n        return true;\n    return false;\n}\n\nexport default function whenResetButtonClicked(setGameStatus,setWinner,setGridValues,setMoves,gameStatus) {\n    \n    if(checkIfGameAlreadyReset(gameStatus))\n    {\n        return;\n    }\n    setGameStatus(0);\n    setWinner(0);\n    setMoves(0);\n    setGridValues([[0,0,0],[0,0,0],[0,0,0]]);\n}","import React from 'react';\n\nimport Header from \"./Header\";\nimport GameBox from \"./GameBox\";\n\nimport \"./Home.css\";\n\n\n\nconst Home = () => {\n    return (\n        <div className=\"Home\">\n            <Header />\n            <GameBox />\n        </div>\n    )\n};\n\nexport default Home;","import './App.css';\nimport React from 'react';\nimport Home from \"./components/Home\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    )\n  } \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));"],"sourceRoot":""}